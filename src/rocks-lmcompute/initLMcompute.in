#!/bin/bash
#
# This script updates Lifemapper configuration file config/config.lmcompute.ini,
# installs cron jobs, and seeds default climate layers.
# Run by the roll install process on all nodes of lmcompute cluster

usage () 
{
    echo "Usage: $0"
    echo "This script is run during the roll install, it will:"
    echo "     - add [machine] section to config/config.lmcompute.ini  "
    echo "     - add maintenance scripts to /etc/cron.daily/ directory  "
    echo "   "
}

set_defaults() {
    LOG=@LMSCRATCHDISK@/log/`/bin/basename $0`.log
    rm -f $LOG
    touch $LOG

    echo "-- enable modules"  >>  $LOG
    source /usr/share/Modules/init/bash

    PROF=/etc/profile.d/lmcompute.sh
    echo "-- set environment" >> $LOG
    if [ -f $PROF ] ; then
	 . $PROF 
    else
    	echo "ERROR: file $PROF not found" >> $LOG 
    	exit
    fi

    BIN=@PKGROOT@/rocks/bin
    CONFIG_FILE=@LMHOME@/config/config.lmcompute.ini
    SITE_CONFIG_FILE=@LMHOME@/config/config.site.ini
    
    # get the SCENARIO_PACKAGE value from config.site.ini or config.lmserver.ini file
    echo "Find scenario package"   >> $LOG  
    SCEN_PKG=`grep ^SCENARIO_PACKAGE $SITE_CONFIG_FILE | awk '{print $2}'`
    if [ ! "$SCEN_PKG" ] ; then 
        SCEN_PKG=`grep ^SCENARIO_PACKAGE $CONFIG_FILE | awk '{print $2}'`
    fi
    if [ ! "$SCEN_PKG" ] ; then
        echo "SCENARIO_PACKAGE not set in $SITE_CONFIG_FILE or $CONFIG_FILE" >> $LOG
        exit 1
    fi
}


cmd_opt_python () {
    cmd=$1
    echo "-- $1 opt-python" >> $LOG
    module $1 opt-python
    @PYBIN@ --version >> $LOG
}


# update permissions on config files
update_perms () {
    echo "-- set permissions on config files" >> $LOG
    GID=`grep lmwriter: /etc/group`
    if [ "$GID" != "" ] ; then
        chgrp lmwriter @PKGROOT@/config/config*.ini*
        chmod 664 @PKGROOT@/config/config*.ini*
    fi
}


# update linker paths
run_ldconfig () {
    echo "-- run ldconfig" >> $LOG
    /sbin/ldconfig
}

# Install all python wheel files with pip
finish_wheel_installs () {
    @PYBIN@ -m ensurepip --default-pip
    # install all wheel files, dependent packages first
    echo "-- complete python wheel installs" >> $LOG
    @PYBIN@ -m pip install wheel-0.34.2-py2.py3-none-any.whl
    @PYBIN@ -m pip install python_dateutil-2.8.1-py2.py3-none-any.whl
    @PYBIN@ -m pip install pyparsing-2.4.7-py2.py3-none-any.whl
    @PYBIN@ -m pip install kiwisolver-1.2.0-cp36-cp36m-manylinux1_x86_64.whl
    @PYBIN@ -m pip install cycler-0.10.0-py2.py3-none-any.whl
    @PYBIN@ -m pip install numpy-1.18.2-cp36-cp36m-manylinux1_x86_64.whl
    @PYBIN@ -m pip install scipy-1.4.1-cp36-cp36m-manylinux1_x86_64.whl
    @PYBIN@ -m pip install matplotlib-3.2.1-cp36-cp36m-manylinux1_x86_64.whl
}


# update config/config.lmcompute.ini
update_config () {
    echo "-- update machine info in config file" >> $LOG
    $BIN/updateCfg-lmcompute
}


# install cron jobs for daily execution
install_cron_jobs () {
    echo "-- install cron jobs" >> $LOG
    $BIN/installComputeCronJobs
}


# transform data on frontend
transform_layers () {
    hn=`/bin/hostname`
    idx=`expr index "$hn" .`
    shortname=${hn:0:idx-1}
    membership=`/opt/rocks/bin/rocks list host $shortname | grep -v MEMBERSHIP | awk '{print $1}'`
    if [ $membership = Frontend ]; then
       echo "-- transform environmental layers (FE only)" >> $LOG
       cmd_opt_python load
       $BIN/transformData $SCEN_PKG
    fi
}


TimeStamp () {
    echo $1 `/bin/date` >> $LOG
}


####### Main #######
if [ $# -ne 0 ]; then
    usage
    exit 0
fi

set_defaults
TimeStamp "# Start"

finish_wheel_installs
run_ldconfig
update_config 
install_cron_jobs
transform_layers
update_perms

TimeStamp "# End"
