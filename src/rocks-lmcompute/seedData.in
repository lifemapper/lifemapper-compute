#!/bin/bash
#
# This script downloads a climate data package, installs it, and catalogs it 
# in the database for the current default user.
# The script can be run at any time to override the previous configuration
# with a new one. 
#
# TODO: This script should take a boom config file for boom input layers

usage () 
{
    echo "Usage: $0 <SCENARIO_PACKAGE_NAME>"
    echo "This script is run on an existing lifemapper-compute installation. "
    echo "It will:"
    echo "     - download and install SCENARIO_PACKAGE_NAME data from the "
    echo "       KU Lifemapper server into the common environmental data directory"
    echo "     - create ASCII grids and MXE files from the packaged TIFFs"
    echo "     - catalog all original and new files in the SQLite3 database layers.db"
    echo "If the data and/or database records are present, the script will make "
    echo "only needed changes."
    echo "   "
    echo "The script can be run at any time to seed a new climate package."
    echo "   "
}

if [ $# -ne 1 ]; then
    usage
    exit 0
fi 

set_defaults() {
    SCEN_PKG=$1
    THISNAME=`/bin/basename $0`
    LMURL=@LMURL@
    PYBIN=/opt/python/bin/@PYTHONVER@
    SEEDPY=@LMHOME@/LmCompute/tools/layerSeeder.py
    BUILD_HASHPY=@LMHOME@/LmDbServer/tools/createClimateHashfile.py     
    
    CLIMATE_DIR=@DATADIR_SHARED@/@INPUT_LAYER_DIR@
    CLIMATE_DB=@DATADIR_SHARED@/@INPUT_LAYER_DIR@/@INPUT_LAYER_DB@    
    if [ -f $CLIMATE_DB ] ; then
        EXISTING_DB=true
    else
        EXISTING_DB=false
    fi 

    LOG=@LMSCRATCHDISK@/log/$THISNAME.log
    touch $LOG
}


### Add layers
seed_layers () {
    if [ -f $SEEDPY ] ; then        
        echo "Add layers for $SCEN_PKG ..." | tee -a $LOG
        $PYBIN $SEEDPY $CLIMATE_DIR/$SCEN_PKG.@CSV_POSTFIX@ 2>&1 | tee -a $LOG
        echo "Fix permissions on new layers.db" | tee -a $LOG
        chgrp lmwriter $CLIMATE_DB
        chmod 664 $CLIMATE_DB
    else
        echo "Error: Missing file $SEEDPY" | tee -a $LOG
        exit 1
    fi
}

### Retrieve climate data named in SCENARIO_PACKAGE_SEED **only** if not present
get_climate_data () {    
    if [ -d $CLIMATE_DIR/$SCEN_PKG ] ; then
        echo "Climate data directory $SCEN_PKG already present" | tee -a $LOG

    else  
        echo "Fetch climate data $SCEN_PKG" | tee -a $LOG
        curl -L "$LMURL/$SCEN_PKG.@TARBALL_POSTFIX@" -o $CLIMATE_DIR/$SCEN_PKG.@TARBALL_POSTFIX@ 

        # uncompress 
        if [ -f $CLIMATE_DIR/$SCEN_PKG.@TARBALL_POSTFIX@ ] ; then
            tar xzf $CLIMATE_DIR/$SCEN_PKG.@TARBALL_POSTFIX@ -C $CLIMATE_DIR/ 
        else
            echo "Failed to retrieve $SCEN_PKG ..." | tee -a $LOG
        fi
    fi
}

### Build csv file of filehash, relativeFilename **only** if not present
find_or_build_hashfile () {    
    # find metadata file pkgname.csv
    if [ -f $CLIMATE_DIR/$SCEN_PKG.@CSV_POSTFIX@ ]; then
        echo "Climate hash csv file for $SCEN_PKG already present" | tee -a $LOG
           
    # build metadata file pkgname.csv
    else  
        if [ -f $BUILD_HASHPY ] ; then        
            echo "Build hash values for $SCEN_PKG ..." | tee -a $LOG
            $PYBIN $BUILD_HASHPY  $SCEN_PKG  $CLIMATE_DIR/$SCEN_PKG 2>&1 | tee -a $LOG
            echo "Fix permissions on new hashfile $CLIMATE_DIR/$SCEN_PKG.@CSV_POSTFIX@" | tee -a $LOG
            chgrp lmwriter $CLIMATE_DIR/$SCEN_PKG.@CSV_POSTFIX@
        else
            echo "Error: Missing file $BUILD_HASHPY" | tee -a $LOG
            exit 1
        fi
    fi
}

TimeStamp () {
    echo $1 `/bin/date` >> $LOG
}

####### Main #######
set_defaults $1
TimeStamp "# Start"

get_climate_data
seed_layers

TimeStamp "# End"
