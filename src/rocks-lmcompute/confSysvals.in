#!@PYBIN@

# Used to add [machine] section to the lmcompute's configuration file
# Run by the roll install process on all compute nodes

import ConfigParser
import os
import sys
import subprocess


class AddConfig():
    def __init__(self, argv):
        if len(argv) == 1:
            config = os.getenv('LIFEMAPPER_CONFIG_FILE') 
            if config is None or len(config) == 0:
                raise Exception, "No configuration file found.  Set LIFEMAPPER_CONFIG_FILE environment variable"
            self.fn = config
        else:
            self.fn = argv[1]

        self.config = ConfigParser.ConfigParser()
        self.config.read(self.fn)

    def getNodename(self):
	cmd = "/opt/rocks/bin/rocks list host attr localhost | grep Kickstart_PublicHostname | grep -v _old"
        info, err = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
        if err:
            print "Error in executing rocks command\n"
            sys.exit()
	nodename, line = info.split(":")
        frontend = line.split()[1]
	if frontend.find(nodename) == 0:
            self.nodename=frontend
        else:
            self.nodename="%s-%s" % (frontend, nodename)

       
    def getSysConfig(self):
        from collections import OrderedDict
        import platform
        import socket

        self.getNodename()
 
        with open(self.fn, 'a') as f:
            f.write('\n[system]\n')
            f.write('Machine Name: {0}\n'.format(self.nodename))
            f.write('Machine IP: {0}\n'.format(socket.gethostbyname(socket.gethostname())))
            f.write('Architecture: {0}\n'.format(platform.processor()))
            f.write('OS: {0}\n'.format(platform.system()))
  
            try:
                meminfo = OrderedDict()
                with open('/proc/meminfo') as f2:
                   for line in f2:
                      meminfo[line.split(':')[0]] = line.split(':')[1].strip()
                f.write('Total Memory: {0}\n'.format(meminfo['MemTotal']))

                x = 0
                f.write("CPU Info: \n")
                with open('/proc/cpuinfo') as f2:
                   for line in f2:
                      if line.strip():
                         if line.rstrip('\n').startswith('model name'):
                            f.write("  {0} -{1}\n".format(x, line.rstrip('\n').split(':')[1]))
                            x += 1
            except:
                pass

            f.write("Python Version: {0}\n".format(platform.python_version()))
            f.write("Linux Version: {0}\n".format(' '.join( platform.linux_distribution())))
          
        self.config = ConfigParser.SafeConfigParser()
        self.config.read(self.fn)
       
    def run(self):
        if 'system' not in self.config.sections():
            self.getSysConfig()
       
### Main ###
app = AddConfig(sys.argv)
app.run()
